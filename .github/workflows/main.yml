name: Build, Test, and Deploy to ECS

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Create ECR repository if it doesn't exist
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws ecr describe-repositories --repository-names picus-app --region $AWS_REGION || \
        aws ecr create-repository --repository-name picus-app --region $AWS_REGION

    - name: Build, tag, and push Docker image
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: picus-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pip install pytest pytest-cov
        pytest test_example.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Create ECS cluster if it doesn't exist
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws ecs describe-clusters --clusters picus-cluster --region $AWS_REGION || \
        aws ecs create-cluster --cluster-name picus-cluster --region $AWS_REGION

    - name: Register ECS task definition
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      run: |
       echo '{
          "family": "picus-task",
          "networkMode": "host",
          "containerDefinitions": [
            {
              "name": "picus-container",
              "image": "'$ECR_REGISTRY'/picus-app:latest",
              "essential": true,
              "memory": 512,
              "cpu": 256,
              "portMappings": [
                {
                  "containerPort": 5000,
                  "hostPort": 5000
                }
              ],
              "environment": [],
              "mountPoints": [],
              "volumesFrom": [],
              "systemControls": []
            }
          ],
          "requiresCompatibilities": [
            "EC2"
          ],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::'${AWS_ACCOUNT_ID}':role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::'${AWS_ACCOUNT_ID}':role/ecsTaskExecutionRole",
          "volumes": [],
          "requiresAttributes": [
            {
              "name": "com.amazonaws.ecs.capability.task-iam-role-network-host"
            },
            {
              "name": "com.amazonaws.ecs.capability.ecr-auth"
            },
            {
              "name": "com.amazonaws.ecs.capability.task-iam-role"
            },
            {
              "name": "ecs.capability.execution-role-ecr-pull"
            },
            {
              "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
            }
          ],
          "placementConstraints": [],
          "compatibilities": [
            "EC2"
          ]
        }' > task-definition.json

        cat task-definition.json

        aws ecs register-task-definition --cli-input-json file://task-definition.json --region $AWS_REGION


    - name: Create ECS service if it doesn't exist
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws ecs describe-services --cluster picus-cluster --services picus-service --region $AWS_REGION || \
        aws ecs create-service --cluster picus-cluster --service-name picus-service --task-definition picus-task --desired-count 1 --region $AWS_REGION

    - name: Deploy to ECS
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: picus-app
        IMAGE_TAG: latest
      run: |
        aws ecs update-service --cluster picus-cluster --service picus-service --force-new-deployment --region $AWS_REGION